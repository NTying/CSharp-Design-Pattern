1、适配器模式：用来做适配的，它将不兼容的接口转换为可兼容的接口，让原本由于接口不兼容而不能一起工作的类可以一起工作

2、适配器模式的两种实现方式：1、类适配器；2、对象适配器

3、如何决定选择哪一种实现方式？判断标准：Adaptee 接口的个数；Adaptee 和 ITarget 的契合程度
	a.	如果 Adaptee 接口并不多，两种方式都可以

	b.	如果 Adaptee 接口很多，而且 Adaptee 和 ITarget 接口定义大部分都相同，推荐使用类适配器，
		因为 Adaptor 复用父类 Adaptee 的接口，比起对象适配器的实现方式，Adaptor 的代码量要少一些

	c.	如果 Adaptee 接口很多，而且 Adaptee 和 ITarget 接口定义大部分都不相同，推荐使用对象适配器，
		因为组合结构相对于继承更加灵活

4、适用场景（一般来说，适配器模式可以看作一种“补偿模式”，用来补救设计上的缺陷）
	a.	封装有缺陷的接口设计
		例如，依赖的外部系统在接口设计方面有缺陷（比如包含大量静态方法），引入之后会影响到我们自身代码的可测试性
	
	b.	统一多个类的接口设计
		某个功能的实现依赖多个外部系统。通过适配器模式，将它们的接口适配为统一的接口定义，就可以使用多态的特性来复用代码逻辑

	c.	替换依赖的外部系统
		当我们把项目中依赖的一个外部系统替换为另一个外部系统的时候，利用适配器模式，可以减少对代码的改动

	d.	兼容老版本接口
		对于一些要废弃的接口，我们不直接将其删除，而是暂时保留，并且标注为 deprecated，并将内部实现逻辑委托为新的接口实现。

	e.	适配不同格式的数据
		可以用在不同格式的数据之间的适配。比如，把从不同征信系统拉取的不同格式的征信数据，统一为相同的格式，以方便存储和使用。